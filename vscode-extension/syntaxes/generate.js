/* Run this file using node */

const path = require("path")
const fs = require("fs/promises")

const generate = async () => {
  let output = {
    $schema: "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    name: "iui",
    patterns: [{ include: "#general" }],
    repository: {
      general: {
        patterns: [
          {
            name: "keyword.control.iui",
            match:
              "\\b(if|else|while|for|await|continue|break|export|\\*\\*\\*\\*\\*return|\\*\\*\\*\\*return|\\*\\*\\*return|\\*\\*return|\\*return|return)\\b",
          },
          {
            name: "constant.numeric.iui",
            match: "[0-9_]",
          },
          {
            name: "support.constant.iui",
            match: "(true|false)",
          },
          { include: "#comments" },
          { include: "#strings" },
          {
            name: "keyword.control.iui",
            match: "(try\\?|try!|try)",
          },
          {
            name: "support.constant.iui",
            match: "<!>",
          },
          {
            name: "keyword.control.iui",
            match: "=>",
          },
          {
            name: "keyword.control.iui",
            match: "(<|>)",
          },
          {
            // Couldn't find another way to get teal colors
            name: "constant.character.escape.iui",
            match: "(=|\\+=|-=|\\*=|/=|&&|\\|\\|)",
          },
          {
            name: "support.constant.iui",
            match: "@[a-z][a-zA-Z0-9]*",
          },
          {
            name: "entity.name.function.iui",
            match: "[a-z][a-zA-Z0-9]*(?=\\()",
          },
          {
            name: "variable.other.property.iui",
            match: "(?<=\\.)[a-z][a-zA-Z0-9]*",
          },
          {
            name: "variable.other.iui",
            match: "[a-z][a-zA-Z0-9]*(?=\\??:)",
          },
          {
            // Select this:
            // myVariable = (
            // With the idea that what follows is probably a function
            name: "entity.name.function.iui",
            match: "&?[a-z][a-zA-Z0-9]*(?=\\s+=\\s+\\()",
          },
          {
            name: "variable.other.object.js.iui",
            match: "&?[a-z][a-zA-Z0-9]*",
          },
          {
            name: "entity.name.type.iui",
            match: "&?[A-Z][a-zA-Z0-9]*",
          },
        ],
      },
      comments: {
        patterns: [
          { name: "comment.line.iui", match: "//.*" },
          { name: "comment.block.iui", begin: "/\\*", end: "\\*/" },
        ],
      },
      strings: {
        patterns: (() => {
          return ["*****", "****", "***", "**", "*", ""].map(asterisks => {
            const asterisksEscaped = asterisks
              .split("")
              .map(asterisk => (asterisk === "" ? "" : "\\*"))
              .join("")

            return {
              name: "string.quoted.iui",
              begin: `${asterisksEscaped}(["'\`])`,
              end: String.raw`\1${asterisksEscaped}`,
              patterns: [
                {
                  name: "constant.character.escape.iui",
                  match: `\\\\${asterisksEscaped}.`,
                },
                {
                  // Backslashes at the end of the line. Extra spaces shouldn't affect it.
                  name: "constant.character.escape.iui",
                  match: `\\\\${asterisksEscaped} *$`,
                },
                {
                  name: "keyword.operator.placeholder.iui",
                  begin: `${asterisksEscaped}{`,
                  end: "}",
                  patterns: [{ include: "#general" }],
                },
              ],
            }
          })
        })(),
      },
    },
    scopeName: "source.iui",
  }

  output = {
    "(WARNING)": `THIS FILE IS AUTOGENERATED, DO NOT EDIT DIRECTLY. EDIT "generate.js" INSTEAD.`,
    ...output,
  }

  const outputPath = path.resolve(__dirname, "iui.tmLanguage.json")
  await fs.writeFile(outputPath, JSON.stringify(output, null, 2))
}

generate()
