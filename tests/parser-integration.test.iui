describe("parser", () {
  test("should be able to call the result of an if statement without extra parentheses", () {
    fn1 = () { * "fn1" }
    fn1 = () { * "fn2" }
    // The main test here is the parentheses following the "}"
    result = if true { * fn1 } else { * fn2 }()
    // Parentheses should work too
    result2 = (if true { * fn1 } else { * fn2 })()
    expect(result).toEqual("fn1")
    expect(result2).toEqual("fn1")
  })

  test("should be able to subscript a function call", () {
    fn = () { * [a: 123] }
    expect(fn().a).toEqual(123)
  })

  test("should be able to call a call", () {
    fn = () { * () { * 123 } }
    expect(fn()()).toEqual(123)
  })

  test("should parse line ending", () {
    a = 123 ;; b = 996 ;; bb8 = 888

    c = 123 ;;
    ;;

    d = 456
    e = 789
    ;; ;; ;;

    expect(a).toEqual(123)
    expect(b).toEqual(996)
    expect(d).toEqual(456)
  })

  test("should not support multiple statements on one line", () {
    a = 123
    b = 456

    expect(() {
      try evaluate("a = 123 b = 456")
    }).toThrowErrorMatching(
      _"Encountered unexpected token "b""_
    )
  })

  // some expressions are only valid at the top level of a block
  test('block expressions are only allowed in a block', () {
    expect(() {
      try evaluate("xyz = numberFive || abc = numberFiftyFive")<!%>
    }).toThrowErrorMatching(
      "Found variable assignment in an improper location, variable assigments must be made at the \
        top level of a block"
    )

    expect(() {
      try evaluate("
        myFunction = () {
          if 3 * 3 == 9 { * true }
          * false
        }
      ")<!%>
    }).toThrowErrorMatching(
      _"Found "*" in an improper location, expressions which return from a function are only \
        allowed at the top level of a block"_
    )
  })

  test("can parse different kinds of assignments", () {
    a = 123
    b<?> = { if randomBoolean() : * null ; else : * 123 ; }
    c.type(0) = 123
    d.type(0<?>) = { if randomBoolean() : * null ; else : * 123 ; }
  })

  test("should handle tricky parentheses without bordering whitespace", () {
    abc = [myKey: 123]
    optionalGetKey.type(() { "" })<?> = null
    defaultGetKey = () { * `myKey` }

    result = abc[(optionalGetKey<?> ?? defaultGetKey)()]

    expect(result).toBe(123)
  })

  test("should be gentle when functions are misformated", () {
    expect(() {
      try evaluate("()  { * 123 }")
    }).toThrowErrorMatching("Encountered unexpected token at {")
  })
})


weirdVal<%> = 20 ?? () {} // valid?

test(() {
  expect(1 + 1 . 50).toEqual(51)
  expect(1 . 50 + 1).toEqual(51)
})
