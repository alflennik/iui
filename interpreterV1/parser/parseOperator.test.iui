test("parser correctly handles precedence of as", () {
  somethingTrue = true
  &enteredIfStatement = false

  if 9 < 10 as afterLessThan && somethingTrue as afterAnd<?> && 1 + 1 as afterPlus<?> {
    &enteredIfStatement = true
    expect(afterLessThan).toEqual(true)
    expect(afterAnd<?>).toEqual(true)
    expect(afterPlus<?>).toEqual(2)
  }

  expect(&enteredIfStatement).toEqual(true)
})

test(_"parser does not allow "as" in statements"_, () {
  &enteredIfStatement = false

  expect(() {
    99 + 1 as hundred
  }).toErrorWithMessageContaining(_"The "as" operator is not allowed here"_)

  expect(() {
    abc = [100, 200, 300]
    abc[2 + 1 as three]
  }).toErrorWithMessageContaining(_"The "as" operator is not allowed here"_)

  can.type([&: true, ...]) = []

  if (99 + 1 as hundred) {
    can.ifExpressions = true
  }

  given 99 + 1 as hundred1 {
    100 as hundred2 : can.given = true ;
    else :;
  }
  
  expect(can.ifExpressions).toEqual(true)
  expect(can.given).toEqual(true)
})